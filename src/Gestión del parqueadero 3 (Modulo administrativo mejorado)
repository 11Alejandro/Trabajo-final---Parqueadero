{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOqZ2N5Us9e7ICb0oKgiLVu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/11Alejandro/Trabajo-final---Parqueadero/blob/main/Gesti%C3%B3n%20del%20parqueadero%203%20(Modulo%20administrativo%20mejorado)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "collapsed": true,
        "id": "eciBA3MtRZJ-",
        "outputId": "7c2db409-c1c2-4af8-adf3-0f0f8afafa75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "                            ______\n",
            "                           /|_||_\\`.__\n",
            "                          (   _    _ _\\\n",
            "                          =`-(_)--(_)-'\n",
            "\n",
            "         \u001b[1m       ¡BIENVENIDO AL PARQUEADER0 AUTOPARK!\u001b[0m\n",
            "\u001b[1m======================== MENÚ PRINCIPAL ========================\u001b[0m\n",
            "1. Registrar usuario\n",
            "2. Ingreso del vehículo\n",
            "3. Retiro del vehículo\n",
            "4. Módulo de administración/reportes\n",
            "5. Salir\n",
            "Selecciona una opción (1-5): 4\n",
            "\n",
            "\u001b[1m=============== MÓDULO DE ADMINISTRACIÓN/REPORTES ===============\u001b[0m\n",
            "Ingrese su usuario: juan\n",
            "\u001b[91mUsuario incorrecto.\u001b[0m\n",
            "Ingrese su usuario: admin\n",
            "Ingrese su contraseña: 123\n",
            "\u001b[91mContraseña incorrecta.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:root:Internal Python error in the inspect module.\n",
            "Below is the traceback from this internal error.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n",
            "    exec(code_obj, self.user_global_ns, self.user_ns)\n",
            "  File \"/tmp/ipython-input-3-1068591318.py\", line 446, in <cell line: 0>\n",
            "    menu_parqueadero()\n",
            "  File \"/tmp/ipython-input-3-1068591318.py\", line 434, in menu_parqueadero\n",
            "    if iniciar_sesion_admin():\n",
            "       ^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/tmp/ipython-input-3-1068591318.py\", line 268, in iniciar_sesion_admin\n",
            "    usuario = input(\"Ingrese su usuario: \")\n",
            "              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 1177, in raw_input\n",
            "    return self._input_request(\n",
            "           ^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\", line 1219, in _input_request\n",
            "    raise KeyboardInterrupt(\"Interrupted by user\") from None\n",
            "KeyboardInterrupt: Interrupted by user\n",
            "\n",
            "During handling of the above exception, another exception occurred:\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\", line 2099, in showtraceback\n",
            "    stb = value._render_traceback_()\n",
            "          ^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "AttributeError: 'KeyboardInterrupt' object has no attribute '_render_traceback_'\n",
            "\n",
            "During handling of the above exception, another exception occurred:\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 1101, in get_records\n",
            "    return _fixed_getinnerframes(etb, number_of_lines_of_context, tb_offset)\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 248, in wrapped\n",
            "    return f(*args, **kwargs)\n",
            "           ^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\", line 281, in _fixed_getinnerframes\n",
            "    records = fix_frame_records_filenames(inspect.getinnerframes(etb, context))\n",
            "                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/lib/python3.11/inspect.py\", line 1739, in getinnerframes\n",
            "    traceback_info = getframeinfo(tb, context)\n",
            "                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/lib/python3.11/inspect.py\", line 1684, in getframeinfo\n",
            "    filename = getsourcefile(frame) or getfile(frame)\n",
            "               ^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/lib/python3.11/inspect.py\", line 948, in getsourcefile\n",
            "    module = getmodule(object, filename)\n",
            "             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "  File \"/usr/lib/python3.11/inspect.py\", line 1002, in getmodule\n",
            "    if not hasattr(object, '__name__'):\n",
            "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
            "KeyboardInterrupt\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "object of type 'NoneType' has no len()",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n",
            "\u001b[0;32m/tmp/ipython-input-3-1068591318.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    445\u001b[0m \u001b[0mcargar_todo_desde_un_archivo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 446\u001b[0;31m \u001b[0mmenu_parqueadero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/tmp/ipython-input-3-1068591318.py\u001b[0m in \u001b[0;36mmenu_parqueadero\u001b[0;34m()\u001b[0m\n\u001b[1;32m    433\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mopcion\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"4\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 434\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0miniciar_sesion_admin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    435\u001b[0m                 \u001b[0mmenu_administracion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/tmp/ipython-input-3-1068591318.py\u001b[0m in \u001b[0;36miniciar_sesion_admin\u001b[0;34m()\u001b[0m\n\u001b[1;32m    267\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 268\u001b[0;31m         \u001b[0musuario\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Ingrese su usuario: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    269\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0musuario\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0musuarios_admin\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1176\u001b[0m             )\n\u001b[0;32m-> 1177\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1178\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1219\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1220\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mshowtraceback\u001b[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[1;32m   2098\u001b[0m                         \u001b[0;31m# in the engines. This should return a list of strings.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2099\u001b[0;31m                         \u001b[0mstb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_render_traceback_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2100\u001b[0m                     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'KeyboardInterrupt' object has no attribute '_render_traceback_'",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "    \u001b[0;31m[... skipping hidden 1 frame]\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py\u001b[0m in \u001b[0;36mshowtraceback\u001b[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)\u001b[0m\n\u001b[1;32m   2099\u001b[0m                         \u001b[0mstb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_render_traceback_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2100\u001b[0m                     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2101\u001b[0;31m                         stb = self.InteractiveTB.structured_traceback(etype,\n\u001b[0m\u001b[1;32m   2102\u001b[0m                                             value, tb, tb_offset=tb_offset)\n\u001b[1;32m   2103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1365\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1366\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1367\u001b[0;31m         return FormattedTB.structured_traceback(\n\u001b[0m\u001b[1;32m   1368\u001b[0m             self, etype, value, tb, tb_offset, number_of_lines_of_context)\n\u001b[1;32m   1369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1265\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose_modes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1266\u001b[0m             \u001b[0;31m# Verbose modes need a full traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1267\u001b[0;31m             return VerboseTB.structured_traceback(\n\u001b[0m\u001b[1;32m   1268\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtb_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumber_of_lines_of_context\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1269\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mstructured_traceback\u001b[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)\u001b[0m\n\u001b[1;32m   1122\u001b[0m         \u001b[0;34m\"\"\"Return a nice text document describing the traceback.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1124\u001b[0;31m         formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,\n\u001b[0m\u001b[1;32m   1125\u001b[0m                                                                tb_offset)\n\u001b[1;32m   1126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mformat_exception_as_a_whole\u001b[0;34m(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)\u001b[0m\n\u001b[1;32m   1080\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1081\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1082\u001b[0;31m         \u001b[0mlast_unique\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion_repeat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfind_recursion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0morig_etype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1084\u001b[0m         \u001b[0mframes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat_records\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlast_unique\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecursion_repeat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/IPython/core/ultratb.py\u001b[0m in \u001b[0;36mfind_recursion\u001b[0;34m(etype, value, records)\u001b[0m\n\u001b[1;32m    380\u001b[0m     \u001b[0;31m# first frame (from in to out) that looks different.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    381\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_recursion_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0metype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 382\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m     \u001b[0;31m# Select filename, lineno, func_name to track frames with\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: object of type 'NoneType' has no len()"
          ]
        }
      ],
      "source": [
        "# =============================== LIBRERIAS Y RUTA =============================\n",
        "\n",
        "import os\n",
        "from datetime import datetime\n",
        "\n",
        "ARCHIVO_DATOS = \"parqueadero.txt\"\n",
        "\n",
        "usuarios = {}\n",
        "vehiculos_en_el_parqueadero = {}\n",
        "historial_retiros = []\n",
        "usuarios_admin = {\"admin\": \"admin123\", \"profesor\": \"profe456\"}\n",
        "tiempo_actuales = []\n",
        "\n",
        "# ========================== FUNCIONES DE GUARDADO/CARGA =======================\n",
        "\n",
        "def guardar_todo_en_un_archivo():\n",
        "    with open(ARCHIVO_DATOS, \"w\") as f:\n",
        "        f.write(\"# USUARIOS\\n\")\n",
        "        for doc, data in usuarios.items():\n",
        "            f.write(f\"{doc},{data['nombre']},{data['apellido']},{data['placa']}\\n\")\n",
        "\n",
        "        f.write(\"\\n# VEHICULOS_PARQUEADOS\\n\")\n",
        "        for doc, data in vehiculos_en_el_parqueadero.items():\n",
        "            f.write(f\"{doc},{data['hora_ingreso'].strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n",
        "\n",
        "        f.write(\"\\n# HISTORIAL_RETIROS\\n\")\n",
        "        for item in historial_retiros:\n",
        "            f.write(f\"{item['documento']},{item['tiempo_parqueado_minutos']},{item['total_pagado']}\\n\")\n",
        "\n",
        "def cargar_todo_desde_un_archivo():\n",
        "    global usuarios, vehiculos_en_el_parqueadero, historial_retiros\n",
        "    usuarios = {}\n",
        "    vehiculos_en_el_parqueadero = {}\n",
        "    historial_retiros = []\n",
        "\n",
        "    if not os.path.exists(ARCHIVO_DATOS):\n",
        "        return\n",
        "\n",
        "    with open(ARCHIVO_DATOS, \"r\") as f:\n",
        "        seccion = None\n",
        "        for linea in f:\n",
        "            linea = linea.strip()\n",
        "            if not linea or linea.startswith(\"#\"):\n",
        "                if \"USUARIOS\" in linea:\n",
        "                    seccion = \"usuarios\"\n",
        "                elif \"VEHICULOS_PARQUEADOS\" in linea:\n",
        "                    seccion = \"parqueados\"\n",
        "                elif \"HISTORIAL_RETIROS\" in linea:\n",
        "                    seccion = \"retiros\"\n",
        "                continue\n",
        "\n",
        "            if seccion == \"usuarios\":\n",
        "                doc, nombre, apellido, placa = linea.split(\",\")\n",
        "                usuarios[doc] = {\n",
        "                    \"nombre\": nombre,\n",
        "                    \"apellido\": apellido,\n",
        "                    \"documento_identidad\": doc,\n",
        "                    \"placa\": placa\n",
        "                }\n",
        "\n",
        "            elif seccion == \"parqueados\":\n",
        "                doc, hora_str = linea.split(\",\")\n",
        "                hora_ingreso = datetime.strptime(hora_str, \"%Y-%m-%d %H:%M:%S\")\n",
        "                vehiculos_en_el_parqueadero[doc] = {\"hora_ingreso\": hora_ingreso}\n",
        "\n",
        "            elif seccion == \"retiros\":\n",
        "                doc, minutos, total = linea.split(\",\")\n",
        "                historial_retiros.append({\n",
        "                    \"documento\": doc,\n",
        "                    \"tiempo_parqueado_minutos\": int(minutos),\n",
        "                    \"total_pagado\": int(total)\n",
        "                })\n",
        "\n",
        "# ======================== FUNCIONES DE VALIDACIÓN =============================\n",
        "\n",
        "# Validación de nombres\n",
        "def validar_nombre(nombre):\n",
        "    if len(nombre) < 3:\n",
        "        print(\"\\033[91mEl nombre debe tener al menos 3 letras. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    if not nombre.isalpha():\n",
        "        print(\"\\033[91mEl nombre solo debe contener letras sin espacios, números ni símbolos. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "# Validación de apellidos\n",
        "def validar_apellido(apellido):\n",
        "    if len(apellido) < 3:\n",
        "        print(\"\\033[91mEl apellido debe tener al menos 3 letras. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    if not apellido.isalpha():\n",
        "        print(\"\\033[91mEl apellido solo debe contener letras sin espacios, números ni símbolos. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "# Validación del documento de identidad\n",
        "def validar_documento(documento):\n",
        "    if not documento.isdigit():\n",
        "        print(\"\\033[91mEl documento solo debe contener números. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    if len(documento) < 3 or len(documento) > 15:\n",
        "        print(\"\\033[91mEl documento debe tener entre 3 y 15 dígitos. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "# Validación de la placa\n",
        "def validar_placa(placa):\n",
        "    placa = placa.upper()\n",
        "    if len(placa) != 6:\n",
        "        print(\"\\033[91mLa placa debe tener exactamente 6 caracteres. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    letras = placa[:3]\n",
        "    numeros = placa[3:]\n",
        "    if not letras.isalpha() or not numeros.isdigit():\n",
        "        print(\"\\033[91mLa placa debe tener 3 letras seguidas de 3 números. Ej: ABC123. Por favor, inténtelo otra vez.\\033[0m\")\n",
        "        return False\n",
        "    return True\n",
        "\n",
        "# =============== FUNCIÓN Y PROCEDIMIENTO PARA REGISTRAR USUARIOS ==============\n",
        "\n",
        "def registrar_nuevo_usuario():\n",
        "    print(\"\\n\\033[1m------------------ REGISTRO DE NUEVO USUARIO --------------------\\033[0m\")\n",
        "\n",
        "    while True:\n",
        "        nombre = input(\"Ingrese su nombre: \")\n",
        "        if validar_nombre(nombre):\n",
        "            break\n",
        "\n",
        "    while True:\n",
        "        apellido = input(\"Ingrese su apellido: \")\n",
        "        if validar_apellido(apellido):\n",
        "            break\n",
        "\n",
        "    while True:\n",
        "        documento = input(\"Ingrese su número de documento: \")\n",
        "        if validar_documento(documento):\n",
        "            break\n",
        "\n",
        "    while True:\n",
        "        placa = input(\"Ingrese la placa del vehículo (formato ABC123): \")\n",
        "        if validar_placa(placa):\n",
        "            placa = placa.upper()\n",
        "            break\n",
        "\n",
        "    usuarios[documento] = {\n",
        "        \"nombre\": nombre,\n",
        "        \"apellido\": apellido,\n",
        "        \"documento_identidad\": documento,\n",
        "        \"placa\": placa\n",
        "    }\n",
        "\n",
        "    print(\"\\033[1;32m------ El usuario ha sido registrado exitosamente ------\\033[0m\\n\")\n",
        "\n",
        "\n",
        "    print(\"\\n\\033[1;32m-------------- Resumen de ingreso --------------\\033[0m\")\n",
        "    print(f\"Documento: {documento}\")\n",
        "    print(f\"Nombre: {nombre}\")\n",
        "    print(f\"Apellido: {apellido}\")\n",
        "    print(f\"Placa del vehículo: {placa}\")\n",
        "    print(\"\\033[1;32m----------------------------------------------------\\033[0m\")\n",
        "\n",
        "# ================ FUNCIÓN Y PROCEDIMIENTO PARA INGRESAR VEHICULO ==============\n",
        "\n",
        "def ingresar_vehiculo():\n",
        "    while True:\n",
        "        print(\"\\n\\033[1m=============== INGRESO DE VEHÍCULO ===============\\033[0m\")\n",
        "\n",
        "        documento = input(\"Ingrese el número de documento del usuario: \")\n",
        "\n",
        "        if documento not in usuarios:\n",
        "            print(\"\\033[91mEste documento no está registrado.\\033[0m\")\n",
        "            opcion = input(\"¿Desea registrar el usuario? (si/no):\").lower()\n",
        "            if opcion == \"si\":\n",
        "                registrar_nuevo_usuario()\n",
        "            else:\n",
        "                print(\"\\033[91mNo se puede continuar sin un usuario registrado.\\033[0m\")\n",
        "                return\n",
        "\n",
        "        if documento in vehiculos_en_el_parqueadero:\n",
        "            print(\"\\033[91mEste usuario ya tiene un vehículo dentro del parqueadero.\\033[0m\")\n",
        "            return\n",
        "\n",
        "        if len(vehiculos_en_el_parqueadero) >= 64:\n",
        "            print(\"\\033[91mEn este momento no hay celdas disponibles.\\033[0m\")\n",
        "            return\n",
        "\n",
        "        hora_ingreso = datetime.now()\n",
        "        vehiculos_en_el_parqueadero[documento] = {\"hora_ingreso\": hora_ingreso}\n",
        "\n",
        "        nombre = usuarios[documento][\"nombre\"]\n",
        "        apellido = usuarios[documento][\"apellido\"]\n",
        "        placa = usuarios[documento][\"placa\"]\n",
        "        hora_ingreso = hora_ingreso.strftime(\"%Y-%m-%d %H:%M:%S\")\n",
        "\n",
        "        print(\"\\n\\033[1;32m-------------- Resumen de ingreso --------------\\033[0m\")\n",
        "        print(f\"\\033[1mDocumento:\\033[0m {documento}\")\n",
        "        print(f\"\\033[1mNombre:\\033[0m {nombre}\")\n",
        "        print(f\"\\033[1mApellido:\\033[0m {apellido}\")\n",
        "        print(f\"\\033[1mPlaca del vehículo:\\033[0m {placa}\")\n",
        "        print(f\"\\033[1mHora de ingreso:\\033[0m {hora_ingreso}\")\n",
        "        print(\"\\033[1;32m----------------------------------------------------\\033[0m\")\n",
        "\n",
        "\n",
        "\n",
        "# =============== FUNCIÓN Y PROCEDIMIENTO PARA RETIRAR VEHICULO ================\n",
        "\n",
        "def retirar_vehiculo():\n",
        "    print(\"\\n\\033[1m=============== RETIRO DE VEHÍCULO ===============\\033[0m\")\n",
        "\n",
        "    usuario = input(\"Ingrese el número de documento del usuario: \")\n",
        "\n",
        "    if usuario in usuarios:\n",
        "        print(\"Usuario verificado correctamente. Puede retirar su vehículo.\")\n",
        "    else:\n",
        "        print(\"No hay ningún vehículo registrado para este documento.\")\n",
        "        opcion = input(\"¿Desea registrarse? (si/no): \").lower()\n",
        "        if opcion == \"si\":\n",
        "            registrar_nuevo_usuario()\n",
        "        return\n",
        "\n",
        "    try:\n",
        "        tiempo_parqueado = int(input(\"Ingrese el tiempo que el vehículo estuvo parqueado (en minutos): \"))\n",
        "    except ValueError:\n",
        "        print(\"Entrada inválida. Debe ingresar un número entero.\")\n",
        "        return\n",
        "\n",
        "    valor_hora = 7000\n",
        "    valor_cuarto = 1500\n",
        "\n",
        "    horas = tiempo_parqueado // 60\n",
        "    minutos_restantes = tiempo_parqueado % 60\n",
        "\n",
        "    if minutos_restantes == 0:\n",
        "        cuartos = 0\n",
        "    elif minutos_restantes <= 15:\n",
        "        cuartos = 1\n",
        "    elif minutos_restantes <= 30:\n",
        "        cuartos = 2\n",
        "    elif minutos_restantes <= 45:\n",
        "        cuartos = 3\n",
        "    else:\n",
        "        cuartos = 4\n",
        "\n",
        "    total_horas = horas * valor_hora\n",
        "    total_cuartos = cuartos * valor_cuarto\n",
        "    total_a_pagar = total_horas + total_cuartos\n",
        "\n",
        "    if total_a_pagar < valor_hora:\n",
        "        total_a_pagar = valor_hora\n",
        "        print(\"Se aplicó el pago mínimo de 7000 pesos.\")\n",
        "\n",
        "    print(\"Horas completas:\", horas)\n",
        "    print(\"Minutos restantes:\", minutos_restantes)\n",
        "    print(\"Cuartos de hora a cobrar:\", cuartos)\n",
        "    print(\"Cobro por horas:\", total_horas)\n",
        "    print(\"Cobro por cuartos:\", total_cuartos)\n",
        "    print(\"Total a pagar por el parqueo:\", total_a_pagar, \"pesos\")\n",
        "\n",
        "\n",
        "# ==================== ACCESO AL MÓDULO DE ADMINISTRACIÓN ======================\n",
        "\n",
        "# ---------------------- Módulo de administración ------------------------------\n",
        "\n",
        "def iniciar_sesion_admin():\n",
        "    print(\"\\n\\033[1m=============== MÓDULO DE ADMINISTRACIÓN/REPORTES ===============\\033[0m\")\n",
        "\n",
        "    while True:\n",
        "        usuario = input(\"Ingrese su usuario: \")\n",
        "        if usuario not in usuarios_admin:\n",
        "            print(\"\\033[91mUsuario incorrecto.\\033[0m\")\n",
        "            continue  # Ask for username again\n",
        "\n",
        "        contrasena = input(\"Ingrese su contraseña: \")\n",
        "        if usuarios_admin[usuario] == contrasena:\n",
        "            print(\"Bienvenido al menú del módulo de administración.\")\n",
        "            return True\n",
        "        else:\n",
        "            print(\"\\033[91mContraseña incorrecta.\\033[0m\")\n",
        "            # No continue here, it will ask for username and password again in the next iteration if the password is wrong\n",
        "            # If you want to give limited attempts, you can add a counter here\n",
        "            continue # Ask for username and password again\n",
        "\n",
        "# --------------------- Reporte de vehículos registrados -----------------------\n",
        "\n",
        "def generar_reporte_total_vehiculos_registrados():\n",
        "    print(\"\\n--- Reporte: Total de vehículos registrados ---\")\n",
        "    total = len(usuarios)\n",
        "    print(f\"Total de usuarios con vehículo registrado: {total}.\")\n",
        "\n",
        "# --------------------- Reporte de vehículos retirados -------------------------\n",
        "\n",
        "def generar_reporte_total_vehiculos_retirados():\n",
        "    print(\"\\n--- Reporte: Total de vehículos retirados ---\")\n",
        "    total = len(historial_retiros)\n",
        "    print(f\"Total de vehículos que han sido retirados: {total}.\")\n",
        "\n",
        "# --------------------- Reporte de vehículos sin retirar -----------------------\n",
        "\n",
        "def generar_reporte_total_vehiculos_sin_retirar():\n",
        "    print(\"\\n--- Reporte: Total de vehículos sin retirar ---\")\n",
        "    total = len(vehiculos_en_el_parqueadero)\n",
        "    print(f\"Total de vehículos actualmente en el parqueadero: {total}.\")\n",
        "\n",
        "# ------------------- Reporte de pago de vehículos retirados -------------------\n",
        "\n",
        "def generar_reporte_total_pago_vehiculos_retirados():\n",
        "    print(\"\\n--- Reporte: Total pago de vehículos retirados ---\")\n",
        "    total_pagado = sum(item['total_pagado'] for item in historial_retiros)\n",
        "    print(f\"Monto total recaudado por vehículos retirados: ${total_pagado:,.2f} pesos.\")\n",
        "\n",
        "# --------------------- Reporte de promedio de estancia ------------------------\n",
        "\n",
        "def generar_reporte_tiempo_promedio_estancia():\n",
        "    print(\"\\n--- Reporte: Tiempo promedio de estancia por vehículo (basado en historial) ---\")\n",
        "    if not historial_retiros:\n",
        "        print(\"No hay vehículos retirados para calcular el promedio de estancia.\")\n",
        "        return\n",
        "\n",
        "    total_minutos = sum(item['tiempo_parqueado_minutos'] for item in historial_retiros)\n",
        "    promedio_minutos = total_minutos / len(historial_retiros)\n",
        "    promedio_horas = promedio_minutos / 60\n",
        "    print(f\"El tiempo promedio de estancia de los vehículos retirados es de {promedio_minutos:.2f} minutos ({promedio_horas:.2f} horas).\")\n",
        "\n",
        "# --------------------- Reporte de usuarios registrados ------------------------\n",
        "\n",
        "def generar_reporte_lista_usuarios():\n",
        "    print(\"\\n--- Reporte: Lista de usuarios registrados ---\")\n",
        "    if not usuarios:\n",
        "        print(\"No hay usuarios registrados en el sistema.\")\n",
        "        return\n",
        "    for doc, data in usuarios.items():\n",
        "        print(f\"Documento: {doc}, Nombre: {data['nombre']} {data['apellido']}, Placa: {data['placa']}\")\n",
        "\n",
        "# --------------- Reporte de tiempo máximo y mínimo de parqueo -----------------\n",
        "\n",
        "def generar_reporte_vehiculo_tiempo_maximo_minimo_parqueo():\n",
        "    print(\"\\n--- Reporte: Vehículo con tiempo de parqueo máximo y mínimo (actualmente parqueados) ---\")\n",
        "    if not vehiculos_en_el_parqueadero:\n",
        "        print(\"No hay vehículos actualmente en el parqueadero para calcular tiempos.\")\n",
        "        return\n",
        "\n",
        "    ahora = datetime.now()\n",
        "\n",
        "    for doc, data in vehiculos_en_el_parqueadero.items():\n",
        "        tiempo_delta = ahora - data[\"hora_ingreso\"]\n",
        "        minutos_actuales = int(tiempo_delta.total_seconds() / 60)\n",
        "        placa = data.get(\"placa\", \"N/A\") # Asegurarse de tener la placa\n",
        "        tiempos_actuales.append({\"documento\": doc, \"placa\": placa, \"minutos\": minutos_actuales})\n",
        "\n",
        "    if not tiempos_actuales:\n",
        "        print(\"No hay vehículos con tiempo de parqueo computable en este momento.\")\n",
        "        return\n",
        "# -------------------- Encontrar el vehículo con más tiempo --------------------\n",
        "\n",
        "    vehiculo_max_tiempo = max(tiempos_actuales, key=lambda x: x['minutos'])\n",
        "    print(f\"Vehículo con más tiempo parqueado (actualmente):\")\n",
        "    print(f\"Placa: {vehiculo_max_tiempo['placa']}, Documento: {vehiculo_max_tiempo['documento']}\")\n",
        "    print(f\"Tiempo: {vehiculo_max_tiempo['minutos']} minutos\")\n",
        "\n",
        "# -------------------- Encontrar el vehículo con menos tiempo ------------------\n",
        "\n",
        "    vehiculo_min_tiempo = min(tiempos_actuales, key=lambda x: x['minutos'])\n",
        "    print(f\"Vehículo con menos tiempo parqueado (actualmente):\")\n",
        "    print(f\"Placa: {vehiculo_min_tiempo['placa']}, Documento: {vehiculo_min_tiempo['documento']}\")\n",
        "    print(f\"Tiempo: {vehiculo_min_tiempo['minutos']} minutos\")\n",
        "\n",
        "# ----------------------- Menú del módulo de administración --------------------\n",
        "\n",
        "def menu_administracion():\n",
        "    while True:\n",
        "        print(\"\\n\\033[1m================ Menú de Administración ================\\033[0m\")\n",
        "\n",
        "        print(\"1. Total de vehículos registrados (usuarios)\")\n",
        "        print(\"2. Total de vehículos retirados (historial)\")\n",
        "        print(\"3. Total de vehículos sin retirar (actualmente en parqueadero)\")\n",
        "        print(\"4. Total pago de vehículos retirados\")\n",
        "        print(\"5. Tiempo promedio de estancia por vehículo en el parqueadero\")\n",
        "        print(\"6. Lista de usuarios registrados\")\n",
        "        print(\"7. Vehículo con tiempo de parqueo máximo y mínimo (actuales)\")\n",
        "        print(\"8. Salir del menú de administración\")\n",
        "        opcion = input(\"Seleccione una opción (1-8): \")\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            generar_reporte_total_vehiculos_registrados()\n",
        "        elif opcion == \"2\":\n",
        "            generar_reporte_total_vehiculos_retirados()\n",
        "        elif opcion == \"3\":\n",
        "            generar_reporte_total_vehiculos_sin_retirar()\n",
        "        elif opcion == \"4\":\n",
        "            generar_reporte_total_pago_vehiculos_retirados()\n",
        "        elif opcion == \"5\":\n",
        "            generar_reporte_tiempo_promedio_estancia()\n",
        "        elif opcion == \"6\":\n",
        "            generar_reporte_lista_usuarios()\n",
        "        elif opcion == \"7\":\n",
        "            generar_reporte_vehiculo_tiempo_maximo_minimo_parqueo()\n",
        "        elif opcion == \"8\":\n",
        "            print(\"Saliste del módulo de administración. ¡Hasta pronto!\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opción inválida. Intente de nuevo.\")\n",
        "\n",
        "\n",
        "# ============================= MENÚ PRINCIPAL =================================\n",
        "\n",
        "def menu_parqueadero():\n",
        "    while True:\n",
        "        print(r\"\"\"\n",
        "                            ______\n",
        "                           /|_||_\\`.__\n",
        "                          (   _    _ _\\\n",
        "                          =`-(_)--(_)-'\n",
        "\n",
        "         \"\"\" + \"\\033[1m\" + \"       ¡BIENVENIDO AL PARQUEADER0 AUTOPARK!\" + \"\\033[0m\")\n",
        "\n",
        "        print(\"\\033[1m======================== MENÚ PRINCIPAL ========================\\033[0m\")\n",
        "        print(\"1. Registrar usuario\")\n",
        "        print(\"2. Ingreso del vehículo\")\n",
        "        print(\"3. Retiro del vehículo\")\n",
        "        print(\"4. Módulo de administración/reportes\")\n",
        "        print(\"5. Salir\")\n",
        "        opcion = input(\"Selecciona una opción (1-5): \")\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            registrar_nuevo_usuario()\n",
        "            guardar_todo_en_un_archivo()\n",
        "        elif opcion == \"2\":\n",
        "            ingresar_vehiculo()\n",
        "            guardar_todo_en_un_archivo()\n",
        "        elif opcion == \"3\":\n",
        "            retirar_vehiculo()\n",
        "            guardar_todo_en_un_archivo()\n",
        "        elif opcion == \"4\":\n",
        "            if iniciar_sesion_admin():\n",
        "                menu_administracion()\n",
        "        elif opcion == \"5\":\n",
        "            print(\"Saliste del menú principal. ¡Hasta pronto!\")\n",
        "            guardar_todo_en_un_archivo()\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opción inválida. Intente de nuevo.\")\n",
        "\n",
        "# ========================== INICIO DEL PROGRAMA ===============================\n",
        "\n",
        "cargar_todo_desde_un_archivo()\n",
        "menu_parqueadero()"
      ]
    }
  ]
}
